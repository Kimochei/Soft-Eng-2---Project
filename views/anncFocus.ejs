const anncID = document.querySelector('#anncID').value;
const commentForm = document.querySelector('#commentForm');
const commentUL = document.querySelector('.commentList');
const flaggedUL = document.querySelector('.flaggedList');

// Function to create a single comment element
function createCommentElement(comment, isReply = false) {
    const li = document.createElement('li');
    const img = document.createElement('img');
    const txt = document.createElement('div');
    const span = document.createElement('span');
    const p = document.createElement('p');
    const replyButton = document.createElement('button');
    const replyForm = document.createElement('form');

    const setDate = new Date(comment.CommentDate);
    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true };
    const formattedDate = setDate.toLocaleString('en-US', options);

    img.src = '../images/svg/circle-user.svg';
    img.alt = 'user';
    img.classList.add('user-placeholder');

    txt.classList.add('txt');
    span.textContent = formattedDate;
    p.textContent = comment.Text;

    txt.appendChild(span);
    txt.appendChild(p);

    if (!isReply) {
        replyButton.textContent = 'Reply';
        replyButton.classList.add('reply-btn');
        replyButton.dataset.commentId = comment.CommentID;
        txt.appendChild(replyButton);
    }

    li.appendChild(img);
    li.appendChild(txt);

    // Reply form (hidden by default)
    replyForm.classList.add('reply-form');
    replyForm.style.display = 'none';
    replyForm.innerHTML = `
        <textarea name="reply" required></textarea>
        <div>
            <button type="reset">Clear</button>
            <button type="submit">Send</button>
        </div>
    `;
    li.appendChild(replyForm);

    replyButton.addEventListener('click', () => {
        const isVisible = replyForm.style.display === 'block';
        document.querySelectorAll('.reply-form').forEach(form => form.style.display = 'none');
        replyForm.style.display = isVisible ? 'none' : 'block';
    });

    replyForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const replyText = replyForm.querySelector('textarea').value;
        if (!replyText.trim()) {
            alert('Reply cannot be empty.');
            return;
        }
        submitComment(replyText, comment.CommentID);
        replyForm.style.display = 'none';
        replyForm.reset();
    });

    return li;
}

// Recursive function to load comments and their replies
const loadComments = (comments) => {
    commentUL.innerHTML = '';
    flaggedUL.innerHTML = '';

    const displayComments = (commentList, parentElement, isReply = false) => {
        for (const comment of commentList) {
            const li = createCommentElement(comment, isReply);

            if (comment.Status === 'flagged') {
                flaggedUL.appendChild(li);
            } else if (comment.Status === 'approved') {
                parentElement.appendChild(li);
            }

            if (comment.replies && comment.replies.length > 0) {
                const replyUL = document.createElement('ul');
                replyUL.classList.add('reply-list');
                li.appendChild(replyUL);
                displayComments(comment.replies, replyUL, true);
            }
        }
    };

    displayComments(comments, commentUL);
};

// Function to submit a comment or reply
const submitComment = (text, parentId = null) => {
    fetch(`/Announcement/${anncID}/addComment`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, parentId }),
    })
    .then(response => response.json())
    .then(res => {
        if (res.success) {
            commentForm.reset();
            fetchComments();
        } else {
            alert(res.message || 'Failed to submit comment.');
        }
    })
    .catch(error => {
        console.error('Error submitting comment:', error);
    });
};

// Main form submission
commentForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const textarea = commentForm.querySelector('#comment').value;

    if (!textarea.trim()) {
        alert('Comment cannot be empty.');
        return;
    }
    submitComment(textarea);
});

// Function to fetch all comments
const fetchComments = () => {
    fetch(`/Announcement/${anncID}/getComments`)
        .then(response => response.json())
        .then(res => {
            if (res.success) {
                loadComments(res.data);
            }
        })
        .catch(error => {
            console.error('Error fetching comments:', error);
        });
};

// Initial load
window.onload = () => {
    fetchComments();
    const galImg = document.querySelector('.galleryImgs');
    new imageViewer(galImg);
};